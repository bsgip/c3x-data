##################################################################################################
#
#               Batching
#
##################################################################################################

[Batches]
# Batching helps to reduce the memory used to clean the data. The amount of files read by the software can vary based
# on RAM available.
# number of batches is based on the amount of files processed in a batch. this makes it possible to process a certain
# amount of data at a time
number_of_batches = 26

# The files in a batch depend on the size of the file.
files_per_batch = 1000

# the concat parameters can be used to only process certain batches. Statistic may show which batches hold relevant data
concat_batches_start = 0
concat_batches_end = 25

##################################################################################################
#
#               Data Path
#
##################################################################################################

[Data Path]
# Paths where files should be stored. If not given a path will be generate (except for the source)
batteries = ./data/batteries
solar = ./data/solar
node = ./data/node
loads = ./data/loads
results = ./data/results


##################################################################################################
#
#               Data usage
#
##################################################################################################

[Data Usage]
# determines which data is processed
batteries = True
solar = True
node = False
loads = True

##################################################################################################
#
#               Time filtering
#
##################################################################################################

[Time Filter]
# the user may choose to only access a certain time
# time_filter_use = True/False]
time_filter_use = False

#defines a Start and an end of a timerange that the user would like to use
start_time = 2019-1-23 00:00
end_time = 2019-1-23 23:55

##################################################################################################
#
#               Indicates how sign corrections are handled
#
##################################################################################################

[Sign Correction]
# Loads and Solar can be filtered by sign to find wrong data. This data can be removed
# wrong_sign_removal [True/False]
wrong_sign_removal = True

# The user may choose to remove more data then the actual faulty data point
# The user can choose to remove the hole day (by date) the hole data_set or some hours
# data_replacement = [drop/nan/zero/remove/none]
data_replacement = nan

# If the user chooses to remove on an hourly bases he can specify how man hours are to be removed
# removal_timerange = [day/hour/all]
removal_time_frame = hour

# The timerange can have the data point in the middle, at the end or at the start of the data set
# fault_placement = [start/middle/end/calendar]
fault_placement = start

##################################################################################################
#
#               Indicates how duplicates are handled
#
##################################################################################################

[Duplicate Removal]
# the user my choose to remove duplicated timestamps
duplicate_removal = True

# the user may choose how he would like to handle the duplicated data. none will remove all
#duplicate timestamps
# data_replacement = first/last/none/average/max/remove
data_replacement = nan

# The user may choose to remove more data then the actual faulty data point
# The user can choose to remove the hole day (by date) the hole data_set or some hours
# removal_time_frame = [day/hour/all]
removal_time_frame = hour

# The timerange can have the data point in the middle, at the end or at the start of the data set
# fault_placement = [start/middle/end/calendar]
fault_placement = calendar

##################################################################################################
#
#               Indicates how Nans are handled
#
##################################################################################################

[Nan handling]
# the user my choose to remove nans
nan_removal = True

# the user may choose how he would like to handle the nan data
# data_replacement = drop/zero/first/last/none/average/max/remove
# drop will remove only the NaN and no other data, whereas remove will remove data according
# to the time frame specified
data_replacement = remove

# The user may choose to remove more data then the actual faulty data point
# The user can choose to remove the hole day (by date) the hole data_set or some hours
# removal_time_frame = [day/hour/all]
removal_time_frame = hour

# The timerange can have the data point in the middle, at the end or at the start of the data set
# fault_placement = [start/middle/end/calendar]
fault_placement = end

##################################################################################################
#
#               Indicates how resampeling is handled
#
##################################################################################################

[Resample]
# the user my choose to resample the index
resampling = True

# desired time step of final df
resampling_step = 5

# unit of desired time step
# possible units are :
# h 	hour 	+/- 1.0e15 years 	[1.0e15 BC, 1.0e15 AD]
# m 	minute 	+/- 1.7e13 years 	[1.7e13 BC, 1.7e13 AD]
# s 	second 	+/- 2.9e12 years 	[ 2.9e9 BC, 2.9e9 AD]
resampling_unit = m

# the user may choose how he would like to handle fill in upsampled data
# resampling_strategy_upsampling = first/last
resampling_strategy_upsampling = first

##################################################################################################
#
#               Data refill of NaN blocks
#
##################################################################################################

[Refill]
# the user my choose to refill data
data_refill = False

# The user may choose how many days they want to jump each iteration
days = 7

# The user may choose how often they would like to jump before giving up
attempts = 7

# the user my choose how many NaN's in a row are considered to be a block
# to simply refill individual NaN's see [Nan handling]
threshold = 5

# The user may choose that data is to be taken from the future
# forward_fill = False
forward_fill = True

# The user may choose that data is to be taken from the future
# backward_fill = True/False
backward_fill = True
